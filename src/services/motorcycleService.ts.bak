// src/services/motorcycleService.ts
import { API_BASE } from "./config"

export type Motorcycle = {
  id: string | number
  modelo: string
  placa: string
  createdAt?: string
  areaId?: number
  areaNome?: string
}

type ServerMoto = {
  id: number
  placa: string
  modelo: string
  idArea: number
  createdAt?: string
}

type Page<T> = {
  total: number
  page: number
  pageSize: number
  items: T[]
  _links?: any
}

function normalize(m: ServerMoto): Motorcycle {
  return {
    id: m.id,
    placa: m.placa,
    modelo: m.modelo,
    areaId: m.idArea,
    createdAt: m.createdAt ?? new Date().toISOString(),
  }
}

// remove hífen e qualquer caractere não A–Z/0–9; deixa maiúsculo
function sanitizePlaca(p: string): string {
  return (p ?? "").replace(/[^A-Z0-9]/gi, "").toUpperCase()
}

async function getAll(): Promise<Motorcycle[]> {
  const url = `${API_BASE}/api/Motos?page=1&pageSize=1000`
  const r = await fetch(url)
  if (!r.ok) {
    const t = await r.text().catch(() => "")
    throw new Error(`Falha ao listar motos: ${r.status} ${t}`)
  }
  const data = (await r.json()) as Page<ServerMoto> | ServerMoto[]
  if (Array.isArray(data)) return data.map(normalize)
  return (data.items ?? []).map(normalize)
}

async function save(m: {
  modelo: string
  placa: string
  areaId: number
}): Promise<Motorcycle> {
  const body = {
    modelo: m.modelo,
    placa: sanitizePlaca(m.placa), // <- sem hífen
    idArea: m.areaId,              // <- nome que o backend espera
  }

  const r = await fetch(`${API_BASE}/api/Motos`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(body),
  })

  if (!(r.status === 200 || r.status === 201)) {
    const t = await r.text().catch(() => "")
    throw new Error(`Falha ao criar moto: ${r.status} ${t}`)
  }

  // Alguns backends retornam 201 sem body — tentamos parsear e, se falhar, caímos num objeto mínimo
  let created: ServerMoto | null = null
  try {
    created = (await r.json()) as ServerMoto
  } catch {
    // sem body; devolve eco do que enviamos (id indefinido)
    return {
      id: "temp",
      modelo: body.modelo,
      placa: body.placa,
      areaId: body.idArea,
      createdAt: new Date().toISOString(),
    }
  }
  return normalize(created)
}

async function update(id: string | number, m: Partial<Motorcycle>): Promise<Motorcycle> {
  const body: any = {
    modelo: m.modelo,
    placa: m.placa != null ? sanitizePlaca(m.placa) : undefined,
    idArea: m.areaId,
  }

  const r = await fetch(`${API_BASE}/api/Motos/${id}`, {
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(body),
  })

  if (!r.ok) {
    const t = await r.text().catch(() => "")
    throw new Error(`Falha ao atualizar moto: ${r.status} ${t}`)
  }

  let updated: ServerMoto | null = null
  try {
    updated = (await r.json()) as ServerMoto
  } catch {
    // sem body; retorna eco do que enviamos
    return {
      id,
      modelo: body.modelo,
      placa: body.placa,
      areaId: body.idArea,
      createdAt: new Date().toISOString(),
    }
  }
  return normalize(updated)
}

async function remove(id: string | number): Promise<void> {
  const r = await fetch(`${API_BASE}/api/Motos/${id}`, { method: "DELETE" })
  if (!r.ok) {
    const t = await r.text().catch(() => "")
    throw new Error(`Falha ao excluir moto: ${r.status} ${t}`)
  }
}

export const motorcycleService = {
  getAll,
  save,
  update,
  delete: remove,
}
